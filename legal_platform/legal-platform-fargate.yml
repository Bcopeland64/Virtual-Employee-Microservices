AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template for deploying AI Legal Platform on AWS Fargate'

Parameters:
  DockerImageContractAnalysis:
    Type: String
    Description: Docker image URI for the Contract Analysis service

  DockerImageComplianceChecker:
    Type: String
    Description: Docker image URI for the Compliance Checker service

  DockerImageLegalResearch:
    Type: String
    Description: Docker image URI for the Legal Research service

  DockerImageLegalDocGen:
    Type: String
    Description: Docker image URI for the Legal Document Generator service

  EnvironmentName:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name (development, staging, production)

  ContainerCpu:
    Type: Number
    Default: 256
    Description: CPU units for the container (1024 = 1 vCPU)

  ContainerMemory:
    Type: Number
    Default: 512
    Description: Memory for the container in MiB

  DesiredCount:
    Type: Number
    Default: 2
    Description: Desired number of container instances for each service

  MaxCount:
    Type: Number
    Default: 4
    Description: Maximum number of container instances for each service

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGateway1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGateway2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-cluster

  # CloudWatch Log Groups
  ContractAnalysisLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}/contract-analysis
      RetentionInDays: 30

  ComplianceCheckerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}/compliance-checker
      RetentionInDays: 30

  LegalResearchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}/legal-research
      RetentionInDays: 30

  LegalDocGenLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}/legal-doc-gen
      RetentionInDays: 30

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  # ECS Task Role with permissions for services
  LegalPlatformTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/AmazonKendraReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
        - arn:aws:iam::aws:policy/AmazonComprehendFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  # Security Group for Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Security Group for ECS Services
  ECSServicesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS services
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb

  # Default ALB Target Group for health checks
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-default
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8080
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299

  # Default ALB Listener
  LoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 200
            MessageBody: Legal Platform API is running

  # Target Groups for each service
  ContractAnalysisTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-contract-analysis
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299

  ComplianceCheckerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-compliance-checker
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299

  LegalResearchTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-legal-research
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299

  LegalDocGenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-legal-doc-gen
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299

  # ALB Listener Rules
  ContractAnalysisListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerHttpListener
      Priority: 10
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ContractAnalysisTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /contracts*

  ComplianceCheckerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerHttpListener
      Priority: 20
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ComplianceCheckerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /compliance*

  LegalResearchListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerHttpListener
      Priority: 30
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LegalResearchTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /research*

  LegalDocGenListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerHttpListener
      Priority: 40
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LegalDocGenTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /documents*

  # Task Definitions
  ContractAnalysisTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-contract-analysis
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt LegalPlatformTaskRole.Arn
      ContainerDefinitions:
        - Name: contract-analysis
          Image: !Ref DockerImageContractAnalysis
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: SERVICE_NAME
              Value: contract-analysis
          Secrets:
            - Name: CONTRACTS_BUCKET
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/legal-platform/CONTRACTS_BUCKET
            - Name: TEXTRACT_OUTPUT_BUCKET
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/legal-platform/TEXTRACT_OUTPUT_BUCKET
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ContractAnalysisLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  ComplianceCheckerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-compliance-checker
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt LegalPlatformTaskRole.Arn
      ContainerDefinitions:
        - Name: compliance-checker
          Image: !Ref DockerImageComplianceChecker
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: SERVICE_NAME
              Value: compliance-checker
          Secrets:
            - Name: REGULATIONS_INDEX_ID
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/legal-platform/REGULATIONS_INDEX_ID
            - Name: COMPLIANCE_DATABASE
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/legal-platform/COMPLIANCE_DATABASE
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ComplianceCheckerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  LegalResearchTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-legal-research
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt LegalPlatformTaskRole.Arn
      ContainerDefinitions:
        - Name: legal-research
          Image: !Ref DockerImageLegalResearch
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: SERVICE_NAME
              Value: legal-research
          Secrets:
            - Name: LEGAL_RESEARCH_INDEX
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/legal-platform/LEGAL_RESEARCH_INDEX
            - Name: BEDROCK_MODEL_ID
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/legal-platform/BEDROCK_MODEL_ID
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LegalResearchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  LegalDocGenTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-legal-doc-gen
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt LegalPlatformTaskRole.Arn
      ContainerDefinitions:
        - Name: legal-doc-gen
          Image: !Ref DockerImageLegalDocGen
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: SERVICE_NAME
              Value: legal-doc-gen
          Secrets:
            - Name: TEMPLATES_BUCKET
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/legal-platform/TEMPLATES_BUCKET
            - Name: DOCUMENTS_BUCKET
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/legal-platform/DOCUMENTS_BUCKET
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LegalDocGenLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # ECS Services
  ContractAnalysisService:
    Type: AWS::ECS::Service
    DependsOn:
      - ContractAnalysisListenerRule
    Properties:
      ServiceName: !Sub ${AWS::StackName}-contract-analysis
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ContractAnalysisTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSServicesSecurityGroup
      LoadBalancers:
        - ContainerName: contract-analysis
          ContainerPort: 8080
          TargetGroupArn: !Ref ContractAnalysisTargetGroup
      HealthCheckGracePeriodSeconds: 60
      DeploymentController:
        Type: ECS

  ComplianceCheckerService:
    Type: AWS::ECS::Service
    DependsOn:
      - ComplianceCheckerListenerRule
    Properties:
      ServiceName: !Sub ${AWS::StackName}-compliance-checker
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ComplianceCheckerTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSServicesSecurityGroup
      LoadBalancers:
        - ContainerName: compliance-checker
          ContainerPort: 8080
          TargetGroupArn: !Ref ComplianceCheckerTargetGroup
      HealthCheckGracePeriodSeconds: 60
      DeploymentController:
        Type: ECS

  LegalResearchService:
    Type: AWS::ECS::Service
    DependsOn:
      - LegalResearchListenerRule
    Properties:
      ServiceName: !Sub ${AWS::StackName}-legal-research
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref LegalResearchTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSServicesSecurityGroup
      LoadBalancers:
        - ContainerName: legal-research
          ContainerPort: 8080
          TargetGroupArn: !Ref LegalResearchTargetGroup
      HealthCheckGracePeriodSeconds: 60
      DeploymentController:
        Type: ECS

  LegalDocGenService:
    Type: AWS::ECS::Service
    DependsOn:
      - LegalDocGenListenerRule
    Properties:
      ServiceName: !Sub ${AWS::StackName}-legal-doc-gen
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref LegalDocGenTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSServicesSecurityGroup
      LoadBalancers:
        - ContainerName: legal-doc-gen
          ContainerPort: 8080
          TargetGroupArn: !Ref LegalDocGenTargetGroup
      HealthCheckGracePeriodSeconds: 60
      DeploymentController:
        Type: ECS

  # Auto Scaling configuration for services
  ContractAnalysisAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref DesiredCount
      MaxCapacity: !Ref MaxCount
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt ContractAnalysisService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  ContractAnalysisAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ContractAnalysisAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ContractAnalysisAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  ComplianceCheckerAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref DesiredCount
      MaxCapacity: !Ref MaxCount
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt ComplianceCheckerService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  ComplianceCheckerAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ComplianceCheckerAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ComplianceCheckerAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  LegalResearchAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref DesiredCount
      MaxCapacity: !Ref MaxCount
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt LegalResearchService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  LegalResearchAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: LegalResearchAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref LegalResearchAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  LegalDocGenAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref DesiredCount
      MaxCapacity: !Ref MaxCount
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt LegalDocGenService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  LegalDocGenAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: LegalDocGenAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref LegalDocGenAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # CloudWatch Alarms
  ContractAnalysisCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-contract-analysis-cpu-alarm
      AlarmDescription: Alarm when CPU exceeds 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt ContractAnalysisService.Name
      TreatMissingData: notBreaching

  ComplianceCheckerCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-compliance-checker-cpu-alarm
      AlarmDescription: Alarm when CPU exceeds 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt ComplianceCheckerService.Name
      TreatMissingData: notBreaching

  LegalResearchCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-legal-research-cpu-alarm
      AlarmDescription: Alarm when CPU exceeds 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt LegalResearchService.Name
      TreatMissingData: notBreaching

  LegalDocGenCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-legal-doc-gen-cpu-alarm
      AlarmDescription: Alarm when CPU exceeds 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt LegalDocGenService.Name
      TreatMissingData: notBreaching

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster

  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  ContractAnalysisUrl:
    Description: URL for the Contract Analysis service
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}/contracts

  ComplianceCheckerUrl:
    Description: URL for the Compliance Checker service
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}/compliance

  LegalResearchUrl:
    Description: URL for the Legal Research service
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}/research

  LegalDocGenUrl:
    Description: URL for the Legal Document Generator service
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}/documents